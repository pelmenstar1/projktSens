// Generated by Dagger (https://dagger.dev).
package com.pelmenstar.projktSens.weather.app.di;

import com.pelmenstar.projktSens.serverProtocol.ProtoConfig;
import com.pelmenstar.projktSens.shared.geo.GeolocationProvider;
import com.pelmenstar.projktSens.shared.time.PrettyDateFormatter;
import com.pelmenstar.projktSens.weather.app.formatters.MoonPhaseFormatter;
import com.pelmenstar.projktSens.weather.app.formatters.UnitFormatter;
import com.pelmenstar.projktSens.weather.app.ui.home.HomeContract;
import com.pelmenstar.projktSens.weather.app.ui.moon.MoonCalendarContract;
import com.pelmenstar.projktSens.weather.app.ui.sunriseSunset.SunriseSunsetCalendarContract;
import com.pelmenstar.projktSens.weather.models.WeatherChannelInfoProvider;
import com.pelmenstar.projktSens.weather.models.WeatherDataSource;
import com.pelmenstar.projktSens.weather.models.astro.MoonInfoProvider;
import com.pelmenstar.projktSens.weather.models.astro.SunInfoProvider;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final AppModule appModule;

  private DaggerAppComponent(AppModule appModuleParam) {
    this.appModule = appModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static AppComponent create() {
    return new Builder().build();
  }

  @Override
  public HomeContract.Presenter homePresenter() {
    return AppModule_HomePresenterFactory.homePresenter(appModule);
  }

  @Override
  public SunriseSunsetCalendarContract.Presenter sunriseSunsetCalendarPresenter() {
    return AppModule_SunriseSunsetCalendarPresenterFactory.sunriseSunsetCalendarPresenter(appModule);
  }

  @Override
  public MoonCalendarContract.Presenter moonCalendarPresenter() {
    return AppModule_MoonCalendarPresenterFactory.moonCalendarPresenter(appModule);
  }

  @Override
  public WeatherDataSource dataSource() {
    return AppModule_DataSourceFactory.dataSource(appModule);
  }

  @Override
  public SunInfoProvider sunInfoProvider() {
    return AppModule_SunInfoProviderFactory.sunInfoProvider(appModule);
  }

  @Override
  public MoonInfoProvider moonInfoProvider() {
    return AppModule_MoonInfoProviderFactory.moonInfoProvider(appModule);
  }

  @Override
  public GeolocationProvider geolocationProvider() {
    return AppModule_GeolocationProviderFactory.geolocationProvider(appModule);
  }

  @Override
  public PrettyDateFormatter prettyDateFormatter() {
    return AppModule_PrettyDateFormatterFactory.prettyDateFormatter(appModule);
  }

  @Override
  public UnitFormatter unitFormatter() {
    return AppModule_UnitFormatterFactory.unitFormatter(appModule);
  }

  @Override
  public MoonPhaseFormatter moonPhaseFormatter() {
    return AppModule_MoonPhaseFormatterFactory.moonPhaseFormatter(appModule);
  }

  @Override
  public WeatherChannelInfoProvider weatherChannelInfoProvider() {
    return AppModule_WeatherChannelInfoProviderFactory.weatherChannelInfoProvider(appModule);
  }

  @Override
  public ProtoConfig protoConfig() {
    return AppModule_ProtoConfigFactory.protoConfig(appModule);
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      return new DaggerAppComponent(appModule);
    }
  }
}
